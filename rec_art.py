"""
author: 
Rachel Yang

Recursive Art Visualizer:
Recursive Art previously generated by recursive_art.py responds 
in real time to changes in audio volume captured by microphone
"""

import alsaaudio
import audioop
import pygame
import os, sys


# initialize pygame
pygame.init()

CURR_DIR = os.path.dirname(os.path.realpath(__file__))

class Visualizer(object):
    """ Loads recursively generated images and displays 
    a different one based on level of audio volume """

    def __init__(self, image_size=(350,350), rate=16000, period_size=160):

        # initialize known constant of image size
        self.image_size, self.rate, self.period_size = image_size, rate, period_size

        # initialize screen to size of recursive art images
        self.screen = pygame.display.set_mode(self.image_size)

        # initialize settings of capturing input audio through mic
        self.input = alsaaudio.PCM(alsaaudio.PCM_CAPTURE,0)
        self.input.setchannels(1)
        self.input.setrate(self.rate)
        self.input.setformat(alsaaudio.PCM_FORMAT_S16_LE)
        self.input.setperiodsize(self.period_size)

    def load_image(self):
        """ Loads images and stores in a list """
        self.images = []

        for image in range(50):
            self.images.append(pygame.image.load(CURR_DIR + "/myart" + str(image) + ".png"))

    def remap_interval(self, val,
                       input_interval_start=0,                   
                       input_interval_end=30000,
                       output_interval_start=0,
                       output_interval_end=29):
        """ Given an input value in the interval [input_interval_start,
            input_interval_end], return an output value scaled to fall within
            the output interval [output_interval_start, output_interval_end].

            val: the value to remap
            input_interval_start: the start of the interval that contains all
                                  possible values for val
            input_interval_end: the end of the interval that contains all possible
                                values for val
            output_interval_start: the start of the interval that contains all
                                   possible output values
            output_inteval_end: the end of the interval that contains all possible
                                output values
            returns: the value remapped from the input to the output interval

            >>> remap_interval(0.5, 0, 1, 0, 10)
            5.0
            >>> remap_interval(5, 4, 6, 0, 2)
            1.0
            >>> remap_interval(5, 4, 6, 1, 2)
            1.5
            >>> remap_interval(3, 1, 5, 6, 7)
            6.5
        """
        # return output value scaled to output interval
        input_range = float(input_interval_end - input_interval_start)
        output_range = float(output_interval_end - output_interval_start)
        output_value = ((val - input_interval_start)/input_range) * (output_range) + output_interval_start
        return output_value

    def visual(self):
        """ Collects audio input data and returns volume levels
        and changes image based on data """
        while 1:
            # l is length, d is captured data
            # reads both from audio stream
            l,data = self.input.read()

            # if l is 0, no audio data 
            if l:
                # root mean square to avoid sign errors
                vol = audioop.rms(data,2)
                # prints volume levels
                print vol

                # loads image to screen at position 0,0
                remap = int(self.remap_interval(vol))
                self.screen.blit(self.images[remap],(0,0))
                # updates screen
                pygame.display.flip()

            # exits program when ESC button is pressed
            for exit in pygame.event.get():
                if exit.type == pygame.KEYDOWN:
                    if (exit.key == pygame.K_ESCAPE):
                        pygame.quit()



if __name__ == '__main__':
    stream = Visualizer()
    stream.load_image()
    stream.visual()